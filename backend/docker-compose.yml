version: '3.1'

x-schedule: &schedule
  extends:
    file: ./services/schedule/docker-compose.yaml
    service: schedule
  depends_on:
    broker:
      condition: service_healthy
    loki:
      condition: service_started

services:

  # api:
  #   extends:
  #     file: ./services/api/docker-compose.yaml
  #     service: api
  #   depends_on:
  #     loki:
  #       condition: service_started

  github_store:
    extends:
      file: ./services/github_store/docker-compose.yaml
      service: github_store
    depends_on:
      broker:
        condition: service_healthy
      loki:
        condition: service_started

  github_load_events:
    extends:
      file: ./services/github_load_events/docker-compose.yaml
      service: github_load_events
    depends_on:
      broker:
        condition: service_healthy
      loki:
        condition: service_started

  github_load_organizations:
    extends:
      file: ./services/github_load_organizations/docker-compose.yaml
      service: github_load_organizations
    depends_on:
      broker:
        condition: service_healthy
      loki:
        condition: service_started

  github_query:
    extends:
      file: ./services/github_query/docker-compose.yaml
      service: github_query
    depends_on:
      broker:
        condition: service_healthy
      loki:
        condition: service_started

  schedule_load_organizations:
    <<: *schedule
    environment:
      NAME: load_organizations
      CRON: "*/100 * * * *"
  
  schedule_repositories_time_stars:
    <<: *schedule
    environment:
      NAME: github_query
      CRON: "*/100 * * * *"
      MESSAGE: "{\"queryName\": \"repositories_time_stars\", \"query\": \"SELECT to_timestamp(round(extract('epoch' from github_created_at) / 3600) * 3600) as time, repository_name, count(*) as star_count FROM (select * from events limit 3000000) as part WHERE type='WatchEvent' GROUP BY time, repository_name HAVING count(*)>=10 ORDER BY time\"}"

  schedule_github_organizations_german:
    <<: *schedule
    environment:
      NAME: github_query
      CRON: "*/100 * * * *"
      MESSAGE: "{\"queryName\": \"organizations_german\", \"query\": \"SELECT distinct on (github_id) * FROM organization_events\"}"
  
  schedule_german_orgs_time_stars:
    <<: *schedule
    environment:
      NAME: github_query
      CRON: "*/100 * * * *"
      MESSAGE: "{\"queryName\": \"german_orgs_time_stars\", \"query\": \"SELECT ORGS_STAR_COUNT.TIME, ORGANIZATIONS_GERMAN.LOGIN, ORGS_STAR_COUNT.STAR_COUNT FROM (SELECT TO_TIMESTAMP(ROUND(EXTRACT('epoch' FROM GITHUB_CREATED_AT) / 3600) * 3600) AS TIME, ORG_ID, COUNT(*) AS STAR_COUNT FROM EVENTS_GERMAN_ORGS WHERE TYPE = 'WatchEvent' GROUP BY TIME, ORG_ID ORDER BY TIME) AS ORGS_STAR_COUNT LEFT JOIN ORGANIZATIONS_GERMAN ON ORGS_STAR_COUNT.ORG_ID = ORGANIZATIONS_GERMAN.GITHUB_ID\"}"

  database:
    extends:
      file: ./services/database/docker-compose.yaml
      service: database
    depends_on:
      loki:
        condition: service_started
  
  pgadmin:
    extends:
      file: ./services/pgadmin/docker-compose.yaml
      service: pgadmin

  zookeeper:
    extends:
      file: ./services/kafka/docker-compose.yaml
      service: zookeeper
    depends_on:
      loki:
        condition: service_started

  broker:
    extends:
      file: ./services/kafka/docker-compose.yaml
      service: broker
    depends_on:
      zookeeper:
        condition: service_started
      loki:
        condition: service_started

  grafana_database:
    extends:
      file: ./services/grafana/docker-compose.yaml
      service: grafana_database
    depends_on:
      loki:
        condition: service_started

  grafana:
    extends:
      file: ./services/grafana/docker-compose.yaml
      service: grafana
    depends_on:
      grafana_database:
        condition: service_healthy
      loki:
        condition: service_started

  loki:
    extends:
      file: ./services/grafana/docker-compose.yaml
      service: loki
