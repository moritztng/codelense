package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"strconv"

	dataModel "github.com/moritztng/codelense/backend/model"
	"github.com/moritztng/codelense/backend/services/api/graph/model"
)

// OrganizationEvents is the resolver for the organizationEvents field.
func (r *queryResolver) OrganizationEvents(ctx context.Context, first int) ([]*model.OrganizationEvent, error) {
	organizationEvents := make([]dataModel.OrganizationEvent, first)
	r.Database.Limit(first).Find(&organizationEvents)
	response := make([]*model.OrganizationEvent, len(organizationEvents))
	for i := range organizationEvents {
		organizationEvent := organizationEvents[i]
		response[i] = &model.OrganizationEvent{ID: strconv.Itoa(int(organizationEvent.Model.ID)), CreatedAt: organizationEvent.CreatedAt, UpdatedAt: &organizationEvent.UpdatedAt, Organization: &model.Organization{GithubID: strconv.Itoa(int(organizationEvent.Organization.GithubID)), Login: organizationEvent.Organization.Login, Name: organizationEvent.Organization.Name, Email: &organizationEvent.Organization.Email, Description: &organizationEvent.Organization.Description, TwitterUsername: &organizationEvent.Organization.TwitterUsername, WebsiteURL: &organizationEvent.Organization.WebsiteUrl, URL: &organizationEvent.Organization.Url, AvatarURL: &organizationEvent.Organization.AvatarUrl, GithubCreatedAt: organizationEvent.Organization.GithubCreatedAt, GithubUpdatedAt: &organizationEvent.Organization.GithubUpdatedAt}}
	}
	return response, nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, first int) ([]*model.Event, error) {
	events := make([]dataModel.Event, first)
	r.Database.Limit(first).Find(&events)
	response := make([]*model.Event, len(events))
	for i := range events {
		event := events[i]
		actorID := strconv.Itoa(int(event.ActorID))
		orgID := strconv.Itoa(int(event.OrgID))
		repositoryID := strconv.Itoa(int(event.RepositoryID))
		response[i] = &model.Event{ID: strconv.Itoa(int(event.Model.ID)), CreatedAt: event.CreatedAt, UpdatedAt: &event.UpdatedAt, GithubID: strconv.Itoa(int(event.GithubID)), Type: event.Type, ActorID: &actorID, OrgID: &orgID, RepositoryID: &repositoryID, Payload: event.Payload.String(), Public: &event.Public, GithubCreatedAt: event.GithubCreatedAt}
	}
	return response, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
