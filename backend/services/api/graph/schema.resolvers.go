package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"strconv"

	pgx "github.com/jackc/pgx/v5"
	"github.com/moritztng/codelense/backend/services/api/graph/model"
)

// TimePoints is the resolver for the timePoints field.
func (r *queryResolver) TimePoints(ctx context.Context, fromDate int, toDate int, location *string) ([]*model.TimePoint, error) {
	r.Logger.Infow("query timepoints", "fromDate", fromDate, "toDate", toDate, "location", *location)
	rows, err := r.Database.Query(context.Background(), r.EventsQuery, fromDate, toDate, location)
	if err != nil {
		r.Logger.Fatal(err)
	}
	var time int
	var orgId int
	var starsSum int
	timePoints := []*model.TimePoint{}
	timePoint := &model.TimePoint{}
	_, err = pgx.ForEachRow(rows, []any{&time, &orgId, &starsSum}, func() error {
		if timePoint.Time != time {
			if timePoint.Time != 0 {
				timePoints = append(timePoints, timePoint)
			}
			timePoint = &model.TimePoint{Time: time}
		}
		timePoint.Values = append(timePoint.Values, &model.Value{Name: strconv.Itoa(orgId), Value: starsSum})
		return nil
	})
	if err != nil {
		r.Logger.Fatal(err)
	}
	return timePoints, nil
}

// Organization is the resolver for the organization field.
func (r *queryResolver) Organization(ctx context.Context, githubID int) (*model.Organization, error) {
	r.Logger.Infow("query organization", "githubID", githubID)
	var name string
	var location string
	var description string
	var url string
	var avatarUrl string
	err := r.Database.QueryRow(context.Background(), r.OrganizationsQuery, githubID).Scan(&name, &location, &description, &url, &avatarUrl)
	if err != nil {
		r.Logger.Fatal(err)
	}
	return &model.Organization{Name: name, Location: &location, Description: &description, URL: &url, AvatarURL: &avatarUrl}, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
