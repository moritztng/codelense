package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"

	"github.com/moritztng/codelense/backend/services/api/graph/model"
)

// TimePoints is the resolver for the timePoints field.
func (r *queryResolver) TimePoints(ctx context.Context, fromDate int, toDate int) ([]*model.TimePoint, error) {
	rows, _ := r.Database.Query(context.Background(), "SELECT ORGS_STAR_COUNT.TIME, ORGANIZATIONS_GERMAN.LOGIN, ORGS_STAR_COUNT.STAR_COUNT FROM (SELECT TO_TIMESTAMP(ROUND(EXTRACT('epoch' FROM GITHUB_CREATED_AT) / 3600) * 3600) AS TIME, ORG_ID, COUNT(*) AS STAR_COUNT FROM EVENTS_GERMAN_ORGS WHERE TYPE = 'WatchEvent' GROUP BY TIME, ORG_ID ORDER BY TIME) AS ORGS_STAR_COUNT LEFT JOIN ORGANIZATIONS_GERMAN ON ORGS_STAR_COUNT.ORG_ID = ORGANIZATIONS_GERMAN.GITHUB_ID\"	", 5)
	// fromDateTime := time.Unix(int64(fromDate), 0)
	// timePoints := []*model.TimePoint{}
	// currentTime := fromDateTime
	// for i := 0; i < 7; i++ {
	// currentTime = currentTime.Add(24 * time.Hour)
	// timePoints = append(timePoints, &model.TimePoint{Time: int(currentTime.Unix()), Values: []*model.Value{{Name: "Prism", Value: i}}})
	// }
	return timePoints, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
