package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.31

import (
	"context"
	"strconv"

	"github.com/jackc/pgx/v5"
	"github.com/moritztng/codelense/backend/services/api/graph/model"
	"github.com/moritztng/codelense/backend/util"
)

// Organizations is the resolver for the organizations field.
func (r *queryResolver) Organizations(ctx context.Context, first int) ([]*model.Organization, error) {
	rows, _ := r.Database.Query(context.Background(), "select key, login, name, created from organizations limit $1", first)
	defer rows.Close()
	organizationsDatabase, _ := pgx.CollectRows(rows, pgx.RowToStructByPos[util.Organization])
	organizations := make([]*model.Organization, len(organizationsDatabase))
	for i, organization := range organizationsDatabase {
		organizations[i] = &model.Organization{Key: strconv.Itoa(organization.Key), Login: organization.Login, Name: organization.Name, Created: organization.CreatedAt.String()}
	}
	return organizations, nil
}

// Events is the resolver for the events field.
func (r *queryResolver) Events(ctx context.Context, first int) ([]*model.Event, error) {
	rows, _ := r.Database.Query(context.Background(), "select key, type, payload, created from events limit $1", first)
	defer rows.Close()
	eventsDatabase, _ := pgx.CollectRows(rows, pgx.RowToStructByPos[util.Event])
	events := make([]*model.Event, len(eventsDatabase))
	for i, event := range eventsDatabase {
		events[i] = &model.Event{Key: strconv.Itoa(event.Key), Type: event.Type, Payload: string(event.Payload), Created: event.CreatedAt.String()}
	}
	return events, nil
}

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type queryResolver struct{ *Resolver }
