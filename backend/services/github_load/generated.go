// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// getRepositoriesResponse is returned by getRepositories on success.
type getRepositoriesResponse struct {
	// Perform a search across resources, returning a maximum of 1,000 results.
	Search getRepositoriesSearchSearchResultItemConnection `json:"search"`
}

// GetSearch returns getRepositoriesResponse.Search, and is useful for accessing the field via an interface.
func (v *getRepositoriesResponse) GetSearch() getRepositoriesSearchSearchResultItemConnection {
	return v.Search
}

// getRepositoriesSearchSearchResultItemConnection includes the requested fields of the GraphQL type SearchResultItemConnection.
// The GraphQL type's documentation follows.
//
// A list of results that matched against a search query. Regardless of the number
// of matches, a maximum of 1,000 results will be available across all types,
// potentially split across many pages.
type getRepositoriesSearchSearchResultItemConnection struct {
	// A list of edges.
	Edges []getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge `json:"edges"`
}

// GetEdges returns getRepositoriesSearchSearchResultItemConnection.Edges, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnection) GetEdges() []getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge {
	return v.Edges
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge includes the requested fields of the GraphQL type SearchResultItemEdge.
// The GraphQL type's documentation follows.
//
// An edge in a connection.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge struct {
	// The item at the end of the edge.
	Node getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem `json:"-"`
}

// GetNode returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge) GetNode() getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem {
	return v.Node
}

func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge
		Node json.RawMessage `json:"node"`
		graphql.NoUnmarshalJSON
	}
	firstPass.getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.Node
		src := firstPass.Node
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalgetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"unable to unmarshal getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node: %w", err)
			}
		}
	}
	return nil
}

type __premarshalgetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge struct {
	Node json.RawMessage `json:"node"`
}

func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge) __premarshalJSON() (*__premarshalgetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge, error) {
	var retval __premarshalgetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge

	{

		dst := &retval.Node
		src := v.Node
		var err error
		*dst, err = __marshalgetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"unable to marshal getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdge.Node: %w", err)
		}
	}
	return &retval, nil
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp includes the requested fields of the GraphQL type App.
// The GraphQL type's documentation follows.
//
// A GitHub App.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp) GetTypename() string {
	return v.Typename
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion includes the requested fields of the GraphQL type Discussion.
// The GraphQL type's documentation follows.
//
// A discussion in a repository.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion) GetTypename() string {
	return v.Typename
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue) GetTypename() string {
	return v.Typename
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing includes the requested fields of the GraphQL type MarketplaceListing.
// The GraphQL type's documentation follows.
//
// A listing in the GitHub integration marketplace.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing) GetTypename() string {
	return v.Typename
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization includes the requested fields of the GraphQL type Organization.
// The GraphQL type's documentation follows.
//
// An account on GitHub, with one or more owners, that has repositories, members and teams.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization) GetTypename() string {
	return v.Typename
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest) GetTypename() string {
	return v.Typename
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository struct {
	Typename string `json:"__typename"`
	// The name of the repository.
	Name string `json:"name"`
	// Returns a count of how many stargazers there are on this object
	StargazerCount int `json:"stargazerCount"`
}

// GetTypename returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetTypename() string {
	return v.Typename
}

// GetName returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.Name, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetName() string {
	return v.Name
}

// GetStargazerCount returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository.StargazerCount, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) GetStargazerCount() int {
	return v.StargazerCount
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem includes the requested fields of the GraphQL interface SearchResultItem.
//
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem is implemented by the following types:
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository
// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser
// The GraphQL type's documentation follows.
//
// The results of a search.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem interface {
	implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() string
}

func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp) implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion) implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue) implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing) implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization) implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest) implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository) implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser) implementsGraphQLInterfacegetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem() {
}

func __unmarshalgetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(b []byte, v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "App":
		*v = new(getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp)
		return json.Unmarshal(b, *v)
	case "Discussion":
		*v = new(getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion)
		return json.Unmarshal(b, *v)
	case "Issue":
		*v = new(getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue)
		return json.Unmarshal(b, *v)
	case "MarketplaceListing":
		*v = new(getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing)
		return json.Unmarshal(b, *v)
	case "Organization":
		*v = new(getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization)
		return json.Unmarshal(b, *v)
	case "PullRequest":
		*v = new(getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest)
		return json.Unmarshal(b, *v)
	case "Repository":
		*v = new(getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository)
		return json.Unmarshal(b, *v)
	case "User":
		*v = new(getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing SearchResultItem.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem: "%v"`, tn.TypeName)
	}
}

func __marshalgetRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem(v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp:
		typename = "App"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeApp
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion:
		typename = "Discussion"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeDiscussion
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue:
		typename = "Issue"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeIssue
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing:
		typename = "MarketplaceListing"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeMarketplaceListing
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization:
		typename = "Organization"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeOrganization
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest:
		typename = "PullRequest"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodePullRequest
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository:
		typename = "Repository"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeRepository
		}{typename, v}
		return json.Marshal(result)
	case *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser:
		typename = "User"

		result := struct {
			TypeName string `json:"__typename"`
			*getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeSearchResultItem: "%T"`, v)
	}
}

// getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser struct {
	Typename string `json:"__typename"`
}

// GetTypename returns getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser.Typename, and is useful for accessing the field via an interface.
func (v *getRepositoriesSearchSearchResultItemConnectionEdgesSearchResultItemEdgeNodeUser) GetTypename() string {
	return v.Typename
}

// The query or mutation executed by getRepositories.
const getRepositories_Operation = `
query getRepositories {
	search(query: "is:public stars:500..1000 sort:stars-asc", type: REPOSITORY, first: 100) {
		edges {
			node {
				__typename
				... on Repository {
					name
					stargazerCount
				}
			}
		}
	}
}
`

func getRepositories(
	ctx context.Context,
	client graphql.Client,
) (*getRepositoriesResponse, error) {
	req := &graphql.Request{
		OpName: "getRepositories",
		Query:  getRepositories_Operation,
	}
	var err error

	var data getRepositoriesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
